{"version":3,"sources":["serviceWorker.js","context.js","reducer.js","components/TodoList.js","components/TodoForm.js","index.js"],"names":["Boolean","window","location","hostname","match","TodosContext","React","createContext","todos","currentTodo","reducer","state","action","type","payload","addedTodos","toggledTodos","map","t","id","updatedTodo","updatedTodoIndex","findIndex","updatedTodos","slice","filteredTodos","filter","isRemovedTodo","TodoList","useContext","dispatch","title","length","className","todo","key","complete","onDoubleClick","a","async","axios","patch","response","data","text","onClick","src","alt","delete","TodoForm","useState","setTodo","useEffect","onSubmit","event","preventDefault","post","uuidv4","onChange","target","value","ReactDOM","render","initialState","useReducer","todosReducer","savedTodos","endpoint","setData","getData","get","useAPI","Provider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c00783f6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\n\nconst TodosContext = React.createContext({\n  todos: [\n    // { id: 1, text: \"Eat breakfast\", complete: false },\n    // { id: 2, text: \"Do laundry\", complete: false },\n    // { id: 3, text: \"Finish project\", complete: true }\n  ],\n  currentTodo: {}\n});\n\nexport default TodosContext;\n","import uuidv4 from \"uuid/v4\";\n\nexport default function reducer(state, action) {\n  switch (action.type) {\n    case \"GET_TODOS\":\n      return {\n        ...state,\n        todos: action.payload\n      };\n    case \"ADD_TODO\":\n      // if (!action.payload) {\n      //   return state;\n      // }\n      // if (state.todos.findIndex(t => t.text === action.payload) > -1) {\n      //   return state;\n      // }\n      const addedTodos = [...state.todos, action.payload];\n      return {\n        ...state,\n        todos: addedTodos\n      };\n    case \"SET_CURRENT_TODO\":\n      return {\n        ...state,\n        currentTodo: action.payload\n      };\n    case \"TOGGLE_TODO\":\n      const toggledTodos = state.todos.map(t =>\n        t.id === action.payload.id ? action.payload : t\n      );\n      return {\n        ...state,\n        todos: toggledTodos\n      };\n    case \"UPDATE_TODO\":\n      // if (!action.payload) {\n      //   return state;\n      // }\n      // if (state.todos.findIndex(t => t.text === action.payload) > -1) {\n      //   return state;\n      // }\n      const updatedTodo = { ...action.payload };\n      const updatedTodoIndex = state.todos.findIndex(\n        t => t.id === state.currentTodo.id\n      );\n      const updatedTodos = [\n        ...state.todos.slice(0, updatedTodoIndex),\n        updatedTodo,\n        ...state.todos.slice(updatedTodoIndex + 1)\n      ];\n      return {\n        ...state,\n        currentTodo: {},\n        todos: updatedTodos\n      };\n    case \"REMOVE_TODO\":\n      const filteredTodos = state.todos.filter(t => t.id !== action.payload.id);\n      const isRemovedTodo =\n        state.currentTodo.id === action.payload.id ? {} : state.currentTodo;\n      return {\n        ...state,\n        currentTodo: isRemovedTodo,\n        todos: filteredTodos\n      };\n    default:\n      return state;\n  }\n}\n","import React, { useContext } from \"react\";\nimport axios from \"axios\";\nimport TodosContext from \"../context\";\n\nexport default function TodoList() {\n  const { state, dispatch } = useContext(TodosContext);\n  const title =\n    state.todos.length > 0 ? `${state.todos.length} Todos` : \"Nothing To Do!\";\n\n  return (\n    <div className=\"container mx-auto max-w-md text-center font-mono\">\n      <h1 className=\"text-bold\">{title}</h1>\n      <ul className=\"list-reset text-white p-0\">\n        {state.todos.map(todo => (\n          <li\n            key={todo.id}\n            className={`lex items-center  border-black border-dashed border-2 my-2 py-4 ${todo.complete? \"bg-green-light\" : \"bg-red-dark\" }`}\n          >\n            <span\n              onDoubleClick={async () => {\n                const response = await axios.patch(\n                  `https://todos-api-nuquyjkqpx.now.sh/todos/${todo.id}`,\n                  {\n                    complete: !todo.complete\n                  }\n                );\n                dispatch({ type: \"TOGGLE_TODO\", payload: response.data });\n              }}\n              className={`flex-1 ml-12 cursor-pointer ${todo.complete &&\n                \"line-through text-grey-darkest\"}`}\n            >\n              {todo.text}\n            </span>\n            <button\n              onClick={() =>\n                dispatch({ type: \"SET_CURRENT_TODO\", payload: todo })\n              }\n            >\n              <img\n                src=\"https://icon.now.sh/edit/0050c5\"\n                alt=\"Edit Icon\"\n                className=\"h-6\"\n              />\n            </button>\n            <button\n              onClick={async () => {\n                await axios.delete(\n                  `https://todos-api-nuquyjkqpx.now.sh/todos/${todo.id}`\n                );\n                dispatch({ type: \"REMOVE_TODO\", payload: todo });\n              }}\n            >\n              <img\n                src=\"https://icon.now.sh/delete/8b0000\"\n                alt=\"Delete Icon\"\n                className=\"h-6\"\n              />\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n","import React, { useState, useEffect, useContext } from \"react\";\nimport axios from \"axios\";\nimport uuidv4 from \"uuid/v4\";\nimport TodosContext from \"../context\";\n\nexport default function TodoForm() {\n  const [todo, setTodo] = useState(\"\");\n  const {\n    state: { currentTodo = {} },\n    dispatch\n  } = useContext(TodosContext);\n\n  useEffect(\n    () => {\n      if (currentTodo.text) {\n        setTodo(currentTodo.text);\n      } else {\n        setTodo(\"\");\n      }\n    },\n    [currentTodo.id]\n  );\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    if (currentTodo.text) {\n      const response = await axios.patch(\n        `https://todos-api-nuquyjkqpx.now.sh/todos/${currentTodo.id}`,\n        {\n          text: todo\n        }\n      );\n      dispatch({ type: \"UPDATE_TODO\", payload: response.data });\n    } else {\n      const response = await axios.post(\n        \"https://todos-api-nuquyjkqpx.now.sh/todos\",\n        {\n          id: uuidv4(),\n          text: todo,\n          complete: false\n        }\n      );\n      dispatch({ type: \"ADD_TODO\", payload: response.data });\n    }\n    setTodo(\"\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"flex justify-center p-5\">\n      <input\n        type=\"text\"\n        className=\"border-black border-solid border-2\"\n        onChange={event => setTodo(event.target.value)}\n        value={todo}\n      />\n    </form>\n  );\n}\n","import React, { useContext, useReducer, useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport axios from \"axios\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport TodosContext from \"./context\";\nimport todosReducer from \"./reducer\";\n\nimport TodoList from \"./components/TodoList\";\nimport TodoForm from \"./components/TodoForm\";\n\nconst useAPI = endpoint => {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const getData = async () => {\n    const response = await axios.get(endpoint);\n    setData(response.data);\n  };\n\n  return data;\n};\n\nconst App = () => {\n  const initialState = useContext(TodosContext);\n  const [state, dispatch] = useReducer(todosReducer, initialState);\n  const savedTodos = useAPI(\"https://todos-api-nuquyjkqpx.now.sh/todos\");\n\n  useEffect(\n    () => {\n      dispatch({\n        type: \"GET_TODOS\",\n        payload: savedTodos\n      });\n    },\n    [savedTodos]\n  );\n\n  return (\n    <TodosContext.Provider value={{ state, dispatch }}>\n      <TodoForm />\n      <TodoList />\n    </TodosContext.Provider>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nif (module.hot) {\n  module.hot.accept();\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}